<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Chat with <%= otherUser.FirstName %> <%= otherUser.LastName %> - LegacyKeeper</title>
  <link rel="stylesheet" href="/css/style.css">
  <style>
    .chat-container {
      display: flex;
      flex-direction: column;
      max-width: 900px;
      margin: 0 auto;
      height: calc(100vh - 200px);
      background: var(--bg-secondary);
      border-radius: 8px;
      overflow: hidden;
    }
    .chat-header {
      display: flex;
      align-items: center;
      justify-content: space-between;
      padding: 1.5rem;
      border-bottom: 2px solid var(--border-color);
      background: var(--bg-tertiary);
    }
    .chat-header-user {
      display: flex;
      align-items: center;
      gap: 1rem;
    }
    .chat-avatar {
      width: 45px;
      height: 45px;
      border-radius: 50%;
      object-fit: cover;
    }
    .chat-avatar-placeholder {
      width: 45px;
      height: 45px;
      border-radius: 50%;
      background: var(--accent-primary);
      display: flex;
      align-items: center;
      justify-content: center;
      color: white;
      font-weight: bold;
      font-size: 1.1rem;
    }
    .chat-user-name {
      font-weight: 600;
      color: var(--text-primary);
      font-size: 1.1rem;
    }
    .chat-messages {
      flex: 1;
      overflow-y: auto;
      padding: 1.5rem;
      display: flex;
      flex-direction: column;
      gap: 1rem;
    }
    .message {
      display: flex;
      gap: 0.75rem;
      max-width: 70%;
    }
    .message.sent {
      align-self: flex-end;
      flex-direction: row-reverse;
    }
    .message.received {
      align-self: flex-start;
    }
    .message-avatar {
      width: 35px;
      height: 35px;
      border-radius: 50%;
      object-fit: cover;
      flex-shrink: 0;
    }
    .message-avatar-placeholder {
      width: 35px;
      height: 35px;
      border-radius: 50%;
      background: var(--accent-primary);
      display: flex;
      align-items: center;
      justify-content: center;
      color: white;
      font-weight: bold;
      font-size: 0.9rem;
      flex-shrink: 0;
    }
    .message-content {
      flex: 1;
    }
    .message-bubble {
      padding: 0.75rem 1rem;
      border-radius: 15px;
      word-wrap: break-word;
      line-height: 1.5;
    }
    .message.sent .message-bubble {
      background: var(--accent-primary);
      color: white;
      border-bottom-right-radius: 5px;
    }
    .message.received .message-bubble {
      background: var(--bg-tertiary);
      color: var(--text-primary);
      border-bottom-left-radius: 5px;
    }
    .message-time {
      font-size: 0.75rem;
      color: var(--text-secondary);
      margin-top: 0.25rem;
      padding: 0 0.5rem;
    }
    .message.sent .message-time {
      text-align: right;
    }
    .chat-input-container {
      padding: 1.5rem;
      border-top: 2px solid var(--border-color);
      background: var(--bg-tertiary);
    }
    .chat-input-form {
      display: flex;
      gap: 1rem;
    }
    .chat-input {
      flex: 1;
      padding: 0.75rem 1rem;
      border: 1px solid var(--border-color);
      border-radius: 25px;
      background: var(--bg-secondary);
      color: var(--text-primary);
      font-size: 1rem;
      outline: none;
      resize: none;
      font-family: inherit;
      max-height: 100px;
    }
    .chat-input:focus {
      border-color: var(--accent-primary);
    }
    .chat-send-btn {
      padding: 0.75rem 2rem;
      background: var(--accent-primary);
      color: white;
      border: none;
      border-radius: 25px;
      cursor: pointer;
      font-weight: 600;
      transition: all 0.2s;
    }
    .chat-send-btn:hover {
      opacity: 0.9;
      transform: scale(1.02);
    }
    .chat-send-btn:disabled {
      opacity: 0.5;
      cursor: not-allowed;
    }
    .typing-indicator {
      display: none;
      padding: 0.5rem 1rem;
      color: var(--text-secondary);
      font-size: 0.9rem;
      font-style: italic;
    }
  </style>
</head>
<body>
  <%- include('../partials/navbar') %>

  <div class="container">
    <%- include('../partials/alerts') %>

    <div style="margin-bottom: 1rem;">
      <a href="/chat" class="btn btn-secondary">‚Üê Back to Chats</a>
    </div>

    <div class="chat-container">
      <div class="chat-header">
        <div class="chat-header-user">
          <% if (otherUser.ProfilePicture) { %>
            <img src="<%= otherUser.ProfilePicture %>" alt="<%= otherUser.FirstName %>" class="chat-avatar">
          <% } else { %>
            <div class="chat-avatar-placeholder">
              <%= otherUser.FirstName.charAt(0) %><%= otherUser.LastName ? otherUser.LastName.charAt(0) : '' %>
            </div>
          <% } %>
          <div class="chat-user-name"><%= otherUser.FirstName %> <%= otherUser.LastName %></div>
        </div>
        <div>
          <a href="/messages/compose?to=<%= otherUser.UniqueId %>" class="btn btn-secondary btn-small">Send Email</a>
          <form action="/chat/<%= conversation.UniqueId %>?_method=DELETE" method="POST" style="display: inline; margin-left: 0.5rem;" onsubmit="return confirm('Are you sure you want to delete this conversation?');">
            <button type="submit" class="btn btn-danger btn-small">Delete</button>
          </form>
        </div>
      </div>

      <div class="chat-messages" id="chatMessages">
        <% if (messages.length === 0) { %>
          <div style="text-align: center; color: var(--text-secondary); padding: 2rem;">
            No messages yet. Start the conversation!
          </div>
        <% } else { %>
          <% messages.forEach(message => {
            const isSent = message.FromUserId === user.UniqueId;
            const sender = isSent ? user : otherUser;
          %>
            <div class="message <%= isSent ? 'sent' : 'received' %>" data-message-id="<%= message.UniqueId %>">
              <% if (sender.ProfilePicture) { %>
                <img src="<%= sender.ProfilePicture %>" alt="<%= sender.FirstName %>" class="message-avatar">
              <% } else { %>
                <div class="message-avatar-placeholder">
                  <%= sender.FirstName.charAt(0) %><%= sender.LastName ? sender.LastName.charAt(0) : '' %>
                </div>
              <% } %>
              <div class="message-content">
                <div class="message-bubble"><%= message.MessageText %></div>
                <div class="message-time"><%= new Date(message.SentAt).toLocaleTimeString([], {hour: '2-digit', minute: '2-digit'}) %></div>
              </div>
            </div>
          <% }); %>
        <% } %>
      </div>

      <div class="typing-indicator" id="typingIndicator">
        <%= otherUser.FirstName %> is typing...
      </div>

      <div class="chat-input-container">
        <form class="chat-input-form" id="chatForm">
          <textarea
            class="chat-input"
            id="messageInput"
            placeholder="Type your message..."
            rows="1"
            required
          ></textarea>
          <button type="submit" class="chat-send-btn" id="sendBtn">Send</button>
        </form>
      </div>
    </div>
  </div>

  <script>
    const conversationId = '<%= conversation.UniqueId %>';
    const currentUserId = '<%= user.UniqueId %>';
    const otherUser = {
      id: '<%= otherUser.UniqueId %>',
      firstName: '<%= otherUser.FirstName %>',
      lastName: '<%= otherUser.LastName %>',
      profilePicture: '<%= otherUser.ProfilePicture || "" %>'
    };

    const chatMessages = document.getElementById('chatMessages');
    const chatForm = document.getElementById('chatForm');
    const messageInput = document.getElementById('messageInput');
    const sendBtn = document.getElementById('sendBtn');

    // Auto-resize textarea
    messageInput.addEventListener('input', function() {
      this.style.height = 'auto';
      this.style.height = (this.scrollHeight) + 'px';
    });

    // Send message
    chatForm.addEventListener('submit', async function(e) {
      e.preventDefault();

      const messageText = messageInput.value.trim();
      if (!messageText) return;

      sendBtn.disabled = true;
      messageInput.disabled = true;

      try {
        const response = await fetch(`/chat/${conversationId}/send`, {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json'
          },
          body: JSON.stringify({ messageText })
        });

        const data = await response.json();

        if (data.success) {
          // Add message to UI
          addMessageToUI(data.message, true);

          // Clear input
          messageInput.value = '';
          messageInput.style.height = 'auto';

          // Scroll to bottom
          scrollToBottom();
        } else {
          alert('Error sending message: ' + (data.error || 'Unknown error'));
        }
      } catch (error) {
        console.error('Error:', error);
        alert('Error sending message');
      } finally {
        sendBtn.disabled = false;
        messageInput.disabled = false;
        messageInput.focus();
      }
    });

    // Add message to UI
    function addMessageToUI(message, isSent) {
      const messageEl = document.createElement('div');
      messageEl.className = `message ${isSent ? 'sent' : 'received'}`;
      messageEl.setAttribute('data-message-id', message.UniqueId);

      const sender = isSent ? { FirstName: '<%= user.FirstName %>', LastName: '<%= user.LastName %>', ProfilePicture: '<%= user.ProfilePicture || "" %>' } : otherUser;

      let avatarHTML;
      if (sender.ProfilePicture) {
        avatarHTML = `<img src="${sender.ProfilePicture}" alt="${sender.FirstName}" class="message-avatar">`;
      } else {
        const initials = sender.FirstName.charAt(0) + (sender.LastName ? sender.LastName.charAt(0) : '');
        avatarHTML = `<div class="message-avatar-placeholder">${initials}</div>`;
      }

      const time = new Date(message.SentAt).toLocaleTimeString([], {hour: '2-digit', minute: '2-digit'});

      messageEl.innerHTML = `
        ${avatarHTML}
        <div class="message-content">
          <div class="message-bubble">${escapeHtml(message.MessageText)}</div>
          <div class="message-time">${time}</div>
        </div>
      `;

      chatMessages.appendChild(messageEl);
    }

    // Escape HTML
    function escapeHtml(text) {
      const div = document.createElement('div');
      div.textContent = text;
      return div.innerHTML;
    }

    // Scroll to bottom
    function scrollToBottom() {
      chatMessages.scrollTop = chatMessages.scrollHeight;
    }

    // Poll for new messages every 3 seconds
    let lastMessageTime = '<%= messages.length > 0 ? messages[messages.length - 1].CreatedDate : new Date().toISOString() %>';

    async function pollForNewMessages() {
      try {
        const response = await fetch(`/chat/${conversationId}/messages?since=${encodeURIComponent(lastMessageTime)}`);
        const data = await response.json();

        if (data.messages && data.messages.length > 0) {
          data.messages.forEach(message => {
            // Check if message is from other user (not from current user)
            if (message.FromUserId !== currentUserId) {
              addMessageToUI(message, false);
            }
          });

          // Update last message time
          lastMessageTime = data.messages[data.messages.length - 1].CreatedDate;

          // Scroll to bottom
          scrollToBottom();
        }
      } catch (error) {
        console.error('Error polling for messages:', error);
      }
    }

    // Poll every 3 seconds
    setInterval(pollForNewMessages, 3000);

    // Initial scroll to bottom
    scrollToBottom();

    // Focus on input
    messageInput.focus();

    // Handle Enter key (send), Shift+Enter (new line)
    messageInput.addEventListener('keydown', function(e) {
      if (e.key === 'Enter' && !e.shiftKey) {
        e.preventDefault();
        chatForm.dispatchEvent(new Event('submit'));
      }
    });
  </script>
</body>
</html>
